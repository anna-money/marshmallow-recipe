{
  "$schema": "https://context7.com/schema/context7.json",
  "projectTitle": "marshmallow-recipe",
  "description": "Convenient serialization/deserialization of Python dataclasses using marshmallow. Supports both marshmallow v2 and v3 simultaneously with automatic schema generation. Features include Generic types, cyclic references, flexible field configuration, naming case conversion, PATCH operations with mr.MISSING, validation, and decimal precision control.",
  "folders": ["examples"],
  "excludeFolders": ["tests", ".github", "benchmarks"],
  "excludeFiles": [],
  "rules": [
    "Works with both marshmallow v2 and v3 - no version-specific code needed",
    "Basic usage: mr.dump(obj) to serialize, mr.load(Class, data) to deserialize",
    "Standard dataclass pattern: @dataclasses.dataclass(frozen=True, slots=True, kw_only=True)",
    "All Python types supported: str, int, float, bool, decimal.Decimal, datetime.datetime, datetime.date, datetime.time, uuid.UUID, enums, Any",
    "Collections: list[T], set[T], frozenset[T], tuple[T, ...], dict[K, V] - all work automatically",
    "Nested dataclasses work automatically without special configuration",
    "Optional types with T | None - None values excluded from output by default",
    "For custom field names use: Annotated[T, mr.meta(name='newName')]",
    "For string transformations: Annotated[str, mr.str_meta(strip_whitespaces=True, post_load=func)]",
    "For decimal precision: Annotated[decimal.Decimal, mr.decimal_meta(places=N)] where N is precision (2/4/9/12 common for finance)",
    "For validation: Annotated[T, mr.meta(validate=lambda x: condition)] or mr.regexp_validate(regex, error=msg)",
    "For collection item validation: mr.list_meta(validate_item=func), mr.set_meta(validate_item=func), mr.tuple_meta(validate_item=func)",
    "GLOBAL PARAMETERS: Three parameters can be passed to load/dump/schema - naming_case, none_value_handling, decimal_places",
    "Global parameter naming_case: mr.dump(obj, naming_case=mr.CAMEL_CASE) converts field names at runtime",
    "Global parameter none_value_handling: mr.dump(obj, none_value_handling=mr.NoneValueHandling.INCLUDE) includes None values",
    "Global parameter decimal_places: mr.dump(obj, decimal_places=2) sets precision for all decimals at runtime",
    "Use @mr.options(naming_case=mr.CAMEL_CASE) for camelCase conversion on entire dataclass",
    "Use @mr.options(naming_case=mr.CAPITAL_CAMEL_CASE) for PascalCase conversion",
    "Use @mr.options(naming_case=mr.UPPER_SNAKE_CASE) for UPPER_SNAKE_CASE conversion",
    "Nested dataclasses keep their own naming conventions - not inherited from parent",
    "Use @mr.options(none_value_handling=mr.NoneValueHandling.INCLUDE) to include None values in output",
    "Use @mr.options(decimal_places=N) to set global decimal precision for all Decimal fields in a dataclass",
    "Global decimal_places is NOT inherited by nested dataclasses - each keeps its own setting",
    "For PATCH operations use mr.MISSING as default: field: T = mr.MISSING to distinguish null from missing fields",
    "mr.MISSING fields are excluded from dump output, allowing partial updates",
    "With none_value_handling=INCLUDE, you can distinguish: field not sent (MISSING), field=null (None), field=value",
    "Generic types with TypeVar work: class Container(Generic[T]) with full inheritance support",
    "Cyclic/self-referencing structures: Type hints with quotes work: 'ClassName | None' or list['ClassName']",
    "Use @mr.pre_load decorator on static methods to transform data before deserialization",
    "Use mr.add_pre_load(Class, func) to programmatically add pre_load hooks without decorator",
    "Custom datetime formats: Annotated[datetime.datetime, mr.datetime_meta(format='%Y-%m-%d %H:%M:%S')]",
    "Use mr.validate(condition, error='msg') helper for readable validation with custom error messages",
    "collections.abc types supported: Sequence (→list), Set (→set), Mapping (→dict) work transparently",
    "NewType support: NewType('UserId', int) works transparently - treated as underlying type",
    "Schemas generated and cached automatically - mr.schema(Class) returns marshmallow Schema, cached per (naming_case, none_value_handling, decimal_places)",
    "Use mr.load_many(Class, list_data) and mr.dump_many(list_objs) for lists of objects",
    "Use mr.get_validation_field_errors(exc) to get structured ValidationError details"
  ],
  "previousVersions": []
}
